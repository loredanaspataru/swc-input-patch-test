diff --git a/node_modules/@spectrum-web-components/search/src/Search.dev.js b/node_modules/@spectrum-web-components/search/src/Search.dev.js
index 060bec9..a867393 100644
--- a/node_modules/@spectrum-web-components/search/src/Search.dev.js
+++ b/node_modules/@spectrum-web-components/search/src/Search.dev.js
@@ -29,6 +29,12 @@ export class Search extends Textfield {
     this.action = "";
     this.label = "Search";
     this.placeholder = "Search";
+    this._formEventHandlers = {
+      submit: this.handleSubmit.bind(this),
+      reset: this.reset.bind(this),
+      keydown: this.handleKeydown.bind(this)
+    };
+    this._firstUpdateAfterConnected = false;
   }
   static get styles() {
     return [...super.styles, searchStyles];
@@ -69,12 +75,10 @@ export class Search extends Textfield {
   renderField() {
     return html`
             <form
+                data-test-id="patched"
                 action=${this.action}
                 id="form"
                 method=${ifDefined(this.method)}
-                @submit=${this.handleSubmit}
-                @reset=${this.reset}
-                @keydown=${this.handleKeydown}
             >
                 <sp-icon-magnify
                     class="icon magnifier icon-workflow icon-search"
@@ -97,6 +101,41 @@ export class Search extends Textfield {
     super.firstUpdated(changedProperties);
     this.inputElement.setAttribute("type", "search");
   }
+
+  firstUpdateAfterConnected() {
+    super.firstUpdateAfterConnected();
+  
+    this.formAbortController = new AbortController();
+    const { signal } = this.formAbortController;
+    this.form.addEventListener("submit", this._formEventHandlers["submit"], { signal });
+    this.form.addEventListener("reset", this._formEventHandlers["reset"], { signal });
+    this.form.addEventListener("keydown", this._formEventHandlers["keydown"], { signal });
+  }
+
+  updated(changes) {
+    super.updated(changes);
+    // Adding this here instead of firstUpdated because we want to make sure
+    // this is called again on the first update after a previous disconnect 
+    // since firstUpdated is called only once
+    if (this._firstUpdateAfterConnected) {
+      this._firstUpdateAfterConnected = false;
+      this.firstUpdateAfterConnected();
+    }
+  }
+
+  connectedCallback() {
+    super.connectedCallback();
+
+    this._firstUpdateAfterConnected = true;
+    this.requestUpdate();
+  }
+
+  disconnectedCallback() {
+    // Cleanup all event listeners
+    this.formAbortController?.abort();
+    super.disconnectedCallback();
+  }
+
   willUpdate() {
     this.multiline = false;
   }
