diff --git a/node_modules/@spectrum-web-components/textfield/src/Textfield.dev.js b/node_modules/@spectrum-web-components/textfield/src/Textfield.dev.js
index 38104d5..f3a4efb 100644
--- a/node_modules/@spectrum-web-components/textfield/src/Textfield.dev.js
+++ b/node_modules/@spectrum-web-components/textfield/src/Textfield.dev.js
@@ -29,10 +29,12 @@ import "@spectrum-web-components/icons-ui/icons/sp-icon-checkmark100.js";
 import "@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js";
 import textfieldStyles from "./textfield.css.js";
 import checkmarkStyles from "@spectrum-web-components/icon/src/spectrum-icon-checkmark.css.js";
+import { isWebKit } from "@spectrum-web-components/shared";
 const textfieldTypes = ["text", "url", "tel", "email", "password"];
 export class TextfieldBase extends ManageHelpText(Focusable) {
   constructor() {
     super(...arguments);
+    this._firstUpdateAfterConnected = true;
     this.allowedKeys = "";
     this.focused = false;
     this.invalid = false;
@@ -48,6 +50,13 @@ export class TextfieldBase extends ManageHelpText(Focusable) {
     this._value = "";
     this.quiet = false;
     this.required = false;
+    this._eventHandlers = {
+            input: this.handleInput.bind(this),
+            change: this.handleChange.bind(this),
+            focus: this.onFocus.bind(this),
+            blur: this.onBlur.bind(this),
+            submit: this.handleInputSubmit.bind(this)
+          };
   }
   static get styles() {
     return [textfieldStyles, checkmarkStyles];
@@ -73,6 +82,10 @@ export class TextfieldBase extends ManageHelpText(Focusable) {
     return this._value;
   }
   get focusElement() {
+    var _a;
+    if (isWebKit()) {
+      return (_a = this._inputRef) != null ? _a : this.inputElement;
+    }
     return this.inputElement;
   }
   /**
@@ -128,6 +141,84 @@ export class TextfieldBase extends ManageHelpText(Focusable) {
   onBlur() {
     this.focused = !this.readonly && false;
   }
+
+  handleInputSubmit(event) {
+    this.dispatchEvent(
+      new Event("submit", {
+        cancelable: true,
+        bubbles: true
+      })
+    );
+    event.preventDefault();
+  }
+
+
+  firstUpdateAfterConnected() {
+    this._inputRef = this.inputElement;
+    if (this.formElement) {
+      this._formRef = this.formElement;
+      this.formElement.addEventListener("submit", this._eventHandlers.submit);
+      this.inputElement.addEventListener("change", this._eventHandlers["change"]);
+      this.inputElement.addEventListener("input", this._eventHandlers["input"]);
+      this.inputElement.addEventListener("focus", this._eventHandlers["focus"]);
+      this.inputElement.addEventListener("blur", this._eventHandlers["blur"]);
+    }
+  }
+
+  updated(changes) {
+    super.updated(changes);
+    if (isWebKit() && this._firstUpdateAfterConnected) {
+      this._firstUpdateAfterConnected = false;
+      this.firstUpdateAfterConnected();
+    }
+  }
+
+  connectedCallback() {
+    super.connectedCallback();
+    if (isWebKit()) {
+      this._firstUpdateAfterConnected = true;
+      if (this._formRef) {
+        const formContainer = this.shadowRoot.querySelector("#form-container");
+        if (formContainer) {
+          formContainer.appendChild(this._formRef);
+          this.requestUpdate();
+        }
+        this._formRef = void 0;
+      }
+    }
+  }
+
+  disconnectedCallback() {
+    var _a, _b, _c, _d;
+    if (isWebKit()) {
+      (_a = this._inputRef) == null ? void 0 : _a.removeEventListener(
+        "change",
+        this._eventHandlers["change"]
+      );
+      (_b = this._inputRef) == null ? void 0 : _b.removeEventListener(
+        "input",
+        this._eventHandlers["input"]
+      );
+      (_c = this._inputRef) == null ? void 0 : _c.removeEventListener(
+        "focus",
+        this._eventHandlers["focus"]
+      );
+      (_d = this._inputRef) == null ? void 0 : _d.removeEventListener(
+        "blur",
+        this._eventHandlers["blur"]
+      );
+
+      if (this._formRef) {
+        this._formRef.remove();
+        this._formRef.removeEventListener(
+          "submit",
+          this._eventHandlers.submit
+        );
+      }
+    }
+    super.disconnectedCallback();
+  }
+
   renderStateIcons() {
     if (this.invalid) {
       return html`
@@ -178,9 +269,37 @@ export class TextfieldBase extends ManageHelpText(Focusable) {
         `;
   }
   get renderInput() {
+    if (isWebKit()) {
+      return html`
+        <!-- @ts-ignore -->
+        <div id="form-container">
+          <form id="formWrapper">
+            <input
+                data-test-id="patched"
+                type=${this.type}
+                aria-describedby=${this.helpTextId}
+                aria-label=${this.label || this.placeholder}
+                aria-invalid=${ifDefined(this.invalid || void 0)}
+                class="input"
+                maxlength=${ifDefined(this.maxlength > -1 ? this.maxlength : void 0)}
+                minlength=${ifDefined(this.minlength > -1 ? this.minlength : void 0)}
+                pattern=${ifDefined(this.pattern)}
+                placeholder=${this.placeholder}
+                .value=${live(this.displayValue)}
+                ?disabled=${this.disabled}
+                ?required=${this.required}
+                ?readonly=${this.readonly}
+                autocomplete=${ifDefined(this.autocomplete)}
+            />
+          </form>
+        </div>
+      `;
+    }
+
     return html`
             <!-- @ts-ignore -->
             <input
+                data-test-id="patched"
                 type=${this.type}
                 aria-describedby=${this.helpTextId}
                 aria-label=${this.label || this.placeholder}
@@ -214,7 +333,7 @@ export class TextfieldBase extends ManageHelpText(Focusable) {
   }
   render() {
     return html`
-            <div id="textfield">${this.renderField()}</div>
+            <div id="textfield" data-test-id="patched">${this.renderField()}</div>
             ${this.renderHelpText(this.invalid)}
         `;
   }
@@ -242,6 +361,9 @@ export class TextfieldBase extends ManageHelpText(Focusable) {
     return validity;
   }
 }
+__decorateClass([
+    query("#formWrapper")
+  ], TextfieldBase.prototype, "formElement", 2);
 __decorateClass([
   property({ attribute: "allowed-keys" })
 ], TextfieldBase.prototype, "allowedKeys", 2);
@@ -249,7 +371,7 @@ __decorateClass([
   property({ type: Boolean, reflect: true })
 ], TextfieldBase.prototype, "focused", 2);
 __decorateClass([
-  query(".input")
+  query("input, input.input, textarea.input")
 ], TextfieldBase.prototype, "inputElement", 2);
 __decorateClass([
   property({ type: Boolean, reflect: true })
